using Xunit;

namespace UnitTests
{
    public class HourglassSumUnitTest
    {
        [Theory]
        [InlineData(@"
        1 0 0 0 0 0 
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0",
                    "[" +
                    "[1,0,0,0]," +
                    "[0,0,0,0]," +
                    "[0,0,0,0]," +
                    "[0,0,0,0]" +
                    "]")]

        [InlineData(@"
        0 1 0 0 0 0 
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0",
                   "[" +
                   "[1,1,0,0]," +
                   "[0,0,0,0]," +
                   "[0,0,0,0]," +
                   "[0,0,0,0]" +
                   "]")]

        [InlineData(@"
        0 0 1 0 0 0 
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0",
                    "[" +
                    "[1,1,1,0]," +
                    "[0,0,0,0]," +
                    "[0,0,0,0]," +
                    "[0,0,0,0]" +
                    "]"
                    )]

        [InlineData(@"
        0 0 0 0 0 0 
        1 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0",
                    "[" +
                    "[0,0,0,0]," +
                    "[1,0,0,0]," +
                    "[0,0,0,0]," +
                    "[0,0,0,0]" +
                    "]"
                )]

        [InlineData(@"
        0 0 0 0 0 0 
        0 1 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0",
                    "[" +
                    "[1,0,0,0]," +
                    "[1,1,0,0]," +
                    "[0,0,0,0]," +
                    "[0,0,0,0]" +
                    "]"
                )]

        [InlineData(@"
        0 0 0 0 0 0 
        0 0 1 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0",
            "[" +
            "[0,1,0,0]," +
            "[1,1,1,0]," +
            "[0,0,0,0]," +
            "[0,0,0,0]" +
            "]"
        )]

        [InlineData(@"
        0 0 0 0 0 0 
        0 0 0 0 0 0
        1 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0",
                    "[" +
                    "[1,0,0,0]," +
                    "[0,0,0,0]," +
                    "[1,0,0,0]," +
                    "[0,0,0,0]" +
                    "]"
                )]

        [InlineData(@"
        0 0 0 0 0 0 
        0 0 0 0 0 0
        0 1 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0",
                    "[" +
                    "[1,1,0,0]," +
                    "[1,0,0,0]," +
                    "[1,1,0,0]," +
                    "[0,0,0,0]" +
                    "]"
                )]

        [InlineData(@"
        0 0 0 0 0 0 
        0 0 0 0 0 0
        0 0 1 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0",
                    "[" +
                    "[1,1,1,0]," +
                    "[0,1,0,0]," +
                    "[1,1,1,0]," +
                    "[0,0,0,0]" +
                    "]"
                )]

        [InlineData(@"
        0 0 0 0 0 0 
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0
        0 0 0 0 0 0",
            "[" +
            "[0,0,0,0]," +
            "[0,0,0,0]," +
            "[0,0,0,0]," +
            "[0,0,0,0]" +
            "]"
        )]

        [InlineData(@"
        -9 -9 -9  1 1 1
        0 -9  0  4 3 2
        -9 -9 -9  1 2 3
        0  0  8  6 6 0
        0  0  0 -2 0 0
        0  0  1  2 4 0",
                    "[" +
                    "[-63,-34,-9,12]," +
                    "[-10,0,28,23]," +
                    "[-27,-11,-2,10]," +
                    "[9,17,25,18]" +
                    "]")]
        public void Test1(string input, string expected)
        {
            var result = HourGlass.HourGlass.HourglassSum(input);
            var x = Newtonsoft.Json.JsonConvert.SerializeObject(result);
            Assert.Equal(expected, x);
        }
    }
}
